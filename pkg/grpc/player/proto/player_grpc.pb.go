// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: player.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Player_Play_FullMethodName                 = "/proto.Player/Play"
	Player_Stop_FullMethodName                 = "/proto.Player/Stop"
	Player_GetListOfAlbums_FullMethodName      = "/proto.Player/GetListOfAlbums"
	Player_GetListOfAlbumTracks_FullMethodName = "/proto.Player/GetListOfAlbumTracks"
)

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerClient interface {
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	// rpc Pause(PauseRequest) returns (PauseResponse) {}
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// rpc Prev(PrevRequest) returns (PrevResponse) {}
	// rpc Next(NextRequest) returns (NextResponse) {}
	// rpc UploadTrack(UploadTrackRequest) returns (UploadTrackResponse) {}
	// rpc RemoveTrack(RemoveTrackRequest) returns (RemoveTrackResponse) {}
	// rpc CreateAlbum(CreateAlbumRequest) returns (CreateAlbumResponse) {}
	// rpc RemoveAlbum(RemoveAlbumRequest) returns (RemoveAlbumResponse) {}
	GetListOfAlbums(ctx context.Context, in *GetListOfAlbumsRequest, opts ...grpc.CallOption) (*GetListOfAlbumsResponse, error)
	GetListOfAlbumTracks(ctx context.Context, in *GetListOfAlbumTracksRequest, opts ...grpc.CallOption) (*GetListOfAlbumTracksResponse, error)
}

type playerClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerClient(cc grpc.ClientConnInterface) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, Player_Play_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, Player_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetListOfAlbums(ctx context.Context, in *GetListOfAlbumsRequest, opts ...grpc.CallOption) (*GetListOfAlbumsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListOfAlbumsResponse)
	err := c.cc.Invoke(ctx, Player_GetListOfAlbums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetListOfAlbumTracks(ctx context.Context, in *GetListOfAlbumTracksRequest, opts ...grpc.CallOption) (*GetListOfAlbumTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListOfAlbumTracksResponse)
	err := c.cc.Invoke(ctx, Player_GetListOfAlbumTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
// All implementations must embed UnimplementedPlayerServer
// for forward compatibility.
type PlayerServer interface {
	Play(context.Context, *PlayRequest) (*PlayResponse, error)
	// rpc Pause(PauseRequest) returns (PauseResponse) {}
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// rpc Prev(PrevRequest) returns (PrevResponse) {}
	// rpc Next(NextRequest) returns (NextResponse) {}
	// rpc UploadTrack(UploadTrackRequest) returns (UploadTrackResponse) {}
	// rpc RemoveTrack(RemoveTrackRequest) returns (RemoveTrackResponse) {}
	// rpc CreateAlbum(CreateAlbumRequest) returns (CreateAlbumResponse) {}
	// rpc RemoveAlbum(RemoveAlbumRequest) returns (RemoveAlbumResponse) {}
	GetListOfAlbums(context.Context, *GetListOfAlbumsRequest) (*GetListOfAlbumsResponse, error)
	GetListOfAlbumTracks(context.Context, *GetListOfAlbumTracksRequest) (*GetListOfAlbumTracksResponse, error)
	mustEmbedUnimplementedPlayerServer()
}

// UnimplementedPlayerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlayerServer struct{}

func (UnimplementedPlayerServer) Play(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (UnimplementedPlayerServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedPlayerServer) GetListOfAlbums(context.Context, *GetListOfAlbumsRequest) (*GetListOfAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfAlbums not implemented")
}
func (UnimplementedPlayerServer) GetListOfAlbumTracks(context.Context, *GetListOfAlbumTracksRequest) (*GetListOfAlbumTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfAlbumTracks not implemented")
}
func (UnimplementedPlayerServer) mustEmbedUnimplementedPlayerServer() {}
func (UnimplementedPlayerServer) testEmbeddedByValue()                {}

// UnsafePlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServer will
// result in compilation errors.
type UnsafePlayerServer interface {
	mustEmbedUnimplementedPlayerServer()
}

func RegisterPlayerServer(s grpc.ServiceRegistrar, srv PlayerServer) {
	// If the following call pancis, it indicates UnimplementedPlayerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Player_ServiceDesc, srv)
}

func _Player_Play_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Play(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Play_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Play(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetListOfAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOfAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetListOfAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_GetListOfAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetListOfAlbums(ctx, req.(*GetListOfAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetListOfAlbumTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOfAlbumTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetListOfAlbumTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Player_GetListOfAlbumTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetListOfAlbumTracks(ctx, req.(*GetListOfAlbumTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Player_ServiceDesc is the grpc.ServiceDesc for Player service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Player_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Play",
			Handler:    _Player_Play_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Player_Stop_Handler,
		},
		{
			MethodName: "GetListOfAlbums",
			Handler:    _Player_GetListOfAlbums_Handler,
		},
		{
			MethodName: "GetListOfAlbumTracks",
			Handler:    _Player_GetListOfAlbumTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
